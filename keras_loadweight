參考來源
http://neyzoter.cn/2018/07/14/Keras-Models-Save-Load-Continue-etel/#1keras%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%96%B9%E6%B3%95%E7%9A%84%E4%BB%8B%E7%BB%8D


1、Keras神經網絡模型方法的介紹
1、model.save(filepath, overwrite=True, include_optimizer=True)

保存模型到h5文件，包括模型的結構、權重、訓練配置（損失函數、優化器等）、優化器的狀態（以便從上次訓練中斷的地方開始）。

overwrite：如果存在源文件，是否覆蓋。

2、keras.models.load_model(filepath, custom_objects=None, compile=True)

通過h5文件，重新實例化模型。如果文件中存儲了訓練配置的話，該函數還會同時完成模型的編譯。

from keras.models import load_model

model.save('my_model.h5')  # 保存模型
del model  # 删掉存在的模型

#返回一个编译好的模型
#与删掉的模型相同
model = load_model('my_model.h5')
載入後，可以繼續訓練。

model.fit(X_train,Y_train)
也可以直接評估：

model.evaluate(X_test, Y_test)
print ( "Loss = " + str( preds[0] ) )
print ( "Test Accuracy = " + str( preds[1] ) )
3、model.to_json()或者model.to_yaml()

只保存模型的結構（到json或者yaml格式），不包含權重或配置信息。返回一個json_string或者yaml_string。

json_string = model.to_json()
yaml_string = model.to_yaml()
通過keras.models.model_from_json(json_string)或者keras.models.model_from_yaml(yaml_string)來載入模型（不包含權重和配置信息）。

4、model.save_weights(filepath, overwrite=True)

將模型的權重保存為h5文件。

通過kmodel.load_weights(filepath,by_name=False,skip_mismatch=False, reshape=False) 初始化一個權重一樣的模型。

注：by_name:是否採用名字來加載模型權重，如果要遷移學習，將其設為True

加載權重到不同的網絡結構（有些層一樣），比如遷移學習，可以通過層的名字來加載模型：

# by_name:是否采用名字来加载模型权重
model.load_weights('my_model_weights.h5', by_name=True)
"""
假如原模型为：
    model = Sequential()
    model.add(Dense(2, input_dim=3, name="dense_1"))
    model.add(Dense(3, name="dense_2"))
    ...
    model.save_weights(fname)
"""
# 新的模型
model = Sequential()
model.add(Dense(2, input_dim=3, name="dense_1"))  # 这里的name和原模型的name相同，将会加载权重
model.add(Dense(10, name="new_dense"))  # 将不会加载权重

# 从原始模型中加载权重; 只影响了第一层“dense_1”.
model.load_weights(fname, by_name=True)


